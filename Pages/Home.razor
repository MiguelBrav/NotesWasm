@page "/"
@using NotesWasm.Data
@using NotesWasm.Models
@inject ILocalStorageService _localstorage;
@inject IJSRuntime JSRuntime

<PageTitle>@homeTitle</PageTitle>

<div class="container mt-2">

   <h1 class="display-4">@greetings</h1>

    <UserComponent currentUser="@savedUser" title="@userTitle">

    </UserComponent>


    <p class="lead">@greetingsMessage</p>

    @if (string.IsNullOrEmpty(savedUser))
    {

        <div class="alert alert-warning mt-4">
            @instruction

            <div>
                <input type="text" @bind="@currentUser" />
                <button @onclick="@update" class="btn btn-primary">@save</button>

            </div>
        </div>
    }
    else
    {

        <div class="mb-3">
            <h2 class="display-8 fw-bold text-secondary">@profiletxt</h2>

            <hr class="mt-4" />

            <label for="userTxt" class="form-label fw-bold text-secondary">@userLabel</label>

            <input id="usertTxt" type="text" class="form-control" @bind=@currentUser>

            <button @onclick="@update" class="btn btn-primary mt-2">@save</button>

            <button class="btn btn-danger mt-2" @onclick="DeleteAccountMSg">@deleteAccountTitle</button>

        </div>
    }


    <SimpleConfirm @ref="deleteAccountConfirm" OnConfirmed="deleteAccount"></SimpleConfirm>

</div>

@code {
    [CascadingParameter(Name = "currentLanguage")]
    public string currentLanguage { get; set; }

    private SimpleConfirm deleteAccountConfirm;

    public string currentUser { get; set; } = string.Empty;

    public string savedUser { get; set; } = string.Empty;

    public string greetings { get; set; } = string.Empty;

    public string greetingsMessage { get; set; } = string.Empty;

    public string title { get; set; } = string.Empty;

    public string instruction { get; set; } = string.Empty;

    public string save { get; set; } = string.Empty;

    public string userTitle { get; set; } = string.Empty;

    public string homeTitle { get; set; } = string.Empty;

    public string userLabel { get; set; } = string.Empty;

    public string deleteAccountTxt { get; set; } = string.Empty;

    public string deleteAccountTitle { get; set; } = string.Empty;

    public string profiletxt { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTranslationsAsync();

        savedUser = await _localstorage.GetItemAsync<string>("savedUser") ?? string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateTranslationsAsync();
    }

    private async Task UpdateTranslationsAsync()
    {
        greetings = Language.GetTranslation("Greetings", currentLanguage);
        greetingsMessage = Language.GetTranslation("MessageWelcome", currentLanguage);
        title = Language.GetTranslation("HomeTitle", currentLanguage);
        instruction = Language.GetTranslation("Instruction", currentLanguage);
        save = Language.GetTranslation("Save", currentLanguage);
        userTitle = Language.GetTranslation("User", currentLanguage);
        homeTitle = Language.GetTranslation("HomeTitle", currentLanguage);
        userLabel = Language.GetTranslation("ChangeUser", currentLanguage);
        save = Language.GetTranslation("Save", currentLanguage);
        deleteAccountTxt = Language.GetTranslation("DeleteAccount", currentLanguage);
        deleteAccountTitle = Language.GetTranslation("DeleteAccountTitle", currentLanguage);
        profiletxt = Language.GetTranslation("Profile", currentLanguage);
    }

    private async Task update()
    {
        if (string.IsNullOrEmpty(currentUser))
        {
            await JSRuntime.InvokeVoidAsync("alert", Language.GetTranslation("AlertName", currentLanguage));

            return;
        }

        savedUser = currentUser;
        currentUser = string.Empty;

        await _localstorage.SetItemAsync("savedUser", savedUser);
    }

    private async Task deleteAccount()
    {
        currentUser = string.Empty;
        savedUser = string.Empty;

        await _localstorage.SetItemAsync("savedUser", string.Empty);

        await _localstorage.SetItemAsync("notes", new List<Note>());

        await _localstorage.SetItemAsync("categories", new List<Category>());

        deleteAccountConfirm.Hide();
    }

    private async Task DeleteAccountMSg()
    {

        deleteAccountConfirm.Show();

        deleteAccountConfirm.BodyContent = Language.GetTranslation("DeleteAccount", currentLanguage);

        deleteAccountConfirm.Title = Language.GetTranslation("ConfirmTitle", currentLanguage);

        deleteAccountConfirm.ConfirmTxt = Language.GetTranslation("Accept", currentLanguage);

        deleteAccountConfirm.CloseTxt = Language.GetTranslation("Close", currentLanguage);
    }

}