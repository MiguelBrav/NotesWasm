@page "/notes"
@using Microsoft.AspNetCore.Components.QuickGrid
@using NotesWasm.Models
@inject ILocalStorageService _localstorage;
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@notesTitle</PageTitle>

<div class="container mt-2">

    <h1 class="display-4">@notesTitle</h1>

    <UserComponent currentUser="@savedUser" title="@userTitle">

    </UserComponent>

    <button class="btn btn-primary" @onclick="AddNotePage">@addTxt</button>   

    @if (notes != null && notes.Count() > 0)
    {
        <button class="btn btn-info text-light ms-3" @onclick="ExportToExcel">@exportTxt</button>

        <button class="btn btn-danger ms-3" @onclick="DeleteAllConfirmed">@deleteAllTxt</button>

        <div class="grid mt-2">
            <QuickGrid Items="notes.AsQueryable()" Pagination="@pagination">
                <PropertyColumn Property="@(note => note.Title)" Title="@tableTitle" Sortable="true" />
                <PropertyColumn Property="@(note => note.Content)" Title="@tableContent" Sortable="true" />
                <PropertyColumn Property="@(note => string.IsNullOrEmpty(note.Category) ? Language.GetTranslation("Uncategorized", currentLanguage) : note.Category)"
                                Title="@tableCategory"
                                Sortable="true" />
                <TemplateColumn Title="@tableActions" Align="Align.Center">
                    <div class="align-content-center">
                        <button class="btn btn-secondary  mt-2 mb-2" @onclick="@(() => EditNotePage(context))">@editTxt</button>
                        <button class="btn btn-danger mt-2 mb-2" @onclick="@(() => DeleteConfirmed(context))">@deleteTxt</button>
                    </div>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="page-buttons">
            @pageGrid:
            @if (pagination.TotalItemCount.HasValue)
            {
                for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex)"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            }
        </div>


    }


</div>

<NoteConfirmation @ref="deleteConfirmation" OnConfirmed="DeleteNote"></NoteConfirmation>

<SimpleConfirm @ref="deleteAllConfirmation" OnConfirmed="DeleteAllNote"></SimpleConfirm>

@code {
    [CascadingParameter(Name = "currentLanguage")]
    public string currentLanguage { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public List<Note> notes { get; set; } = new List<Note>();

    public List<Category> categories { get; set; } = new List<Category>();

    public string notesTitle { get; set; } = string.Empty;

    public string savedUser { get; set; } = string.Empty;

    public string userTitle { get; set; } = string.Empty;

    public string addTxt { get; set; } = string.Empty;

    public string editTxt { get; set; } = string.Empty;

    public string deleteTxt { get; set; } = string.Empty;

    public string deleteAllTxt { get; set; } = string.Empty;

    public string tableTitle { get; set; } = string.Empty;

    public string tableContent { get; set; } = string.Empty;

    public string tableCategory { get; set; } = string.Empty;

    public string tableActions { get; set; } = string.Empty;

    public string exportTxt { get; set; } = string.Empty;

    public string pageGrid { get; set; } = string.Empty;

    private NoteConfirmation deleteConfirmation;

    private SimpleConfirm deleteAllConfirmation;

    protected override async Task OnInitializedAsync()
    {
        savedUser = await _localstorage.GetItemAsync<string>("savedUser") ?? string.Empty;

        if (string.IsNullOrEmpty(savedUser))
        {
            Navigation.NavigateTo("/");
        }

        await UpdateTranslationsAsync();

        await LoadNotesAsync();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateTranslationsAsync();
    }

    private async Task UpdateTranslationsAsync()
    {
        userTitle = Language.GetTranslation("User", currentLanguage);
        notesTitle = Language.GetTranslation("NotesTitle", currentLanguage);
        addTxt = Language.GetTranslation("Add", currentLanguage);
        editTxt = Language.GetTranslation("Edit", currentLanguage);
        deleteTxt = Language.GetTranslation("Delete", currentLanguage);
        tableTitle = Language.GetTranslation("Title", currentLanguage);
        tableContent = Language.GetTranslation("Content", currentLanguage);
        tableActions = Language.GetTranslation("Actions", currentLanguage);
        tableCategory = Language.GetTranslation("Category", currentLanguage);
        exportTxt = Language.GetTranslation("ExportExcel", currentLanguage);
        pageGrid = Language.GetTranslation("Page", currentLanguage);
        deleteAllTxt = Language.GetTranslation("DeleteAll", currentLanguage);
    }

    private async Task LoadNotesAsync()
    {
        notes = await _localstorage.GetItemAsync<List<Note>>("notes") ?? new List<Note>();
    }

    private void AddNotePage()
    {
        Navigation.NavigateTo("/notes/current/0");
    }

    private void EditNotePage(Note note)
    {
        Navigation.NavigateTo($"/notes/current/{note.Id}");
    }

    private void DeleteNote(Note note)
    {
        Note noteToDelete = notes.FirstOrDefault(n => n.Id == note.Id);
        if (noteToDelete != null)
        {
            notes.Remove(noteToDelete);
            for (int i = 0; i < notes.Count; i++)
            {
                notes[i].Id = i + 1;
            }
            _localstorage.SetItemAsync("notes", notes);
        }
        deleteConfirmation.Hide();
    }

    private void DeleteAllNote()
    {
        notes = new List<Note>();
        _localstorage.SetItemAsync("notes", notes);
        deleteAllConfirmation.Hide();
    }

    private async Task ExportToExcel()
    {
        List<List<string>> data = new List<List<string>>()
        {
            new List<string> { tableTitle, tableContent, tableCategory } 
        };

        data.AddRange(notes.Select(note => new List<string>
        {
            note.Title,
            note.Content,
            string.IsNullOrEmpty(note.Category) ? Language.GetTranslation("Uncategorized", currentLanguage) : note.Category
        }));

        await JSRuntime.InvokeVoidAsync("exportToExcel", data, $"{notesTitle}.csv");
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private async Task DeleteConfirmed(Note currentNote)
    {

        deleteConfirmation.Show();

        deleteConfirmation.BodyContent = string.Format(Language.GetTranslation("DeleteConfirm", currentLanguage), currentNote.Title);

        deleteConfirmation.Title = Language.GetTranslation("ConfirmTitle", currentLanguage);

        deleteConfirmation.ConfirmTxt = Language.GetTranslation("Accept", currentLanguage);

        deleteConfirmation.CloseTxt = Language.GetTranslation("Close", currentLanguage);

        deleteConfirmation.CurrentNote = currentNote;
    }

    private async Task DeleteAllConfirmed()
    {

        deleteAllConfirmation.Show();

        deleteAllConfirmation.BodyContent = Language.GetTranslation("DeleteAllConfirm", currentLanguage);

        deleteAllConfirmation.Title = Language.GetTranslation("ConfirmTitle", currentLanguage);

        deleteAllConfirmation.ConfirmTxt = Language.GetTranslation("Accept", currentLanguage);

        deleteAllConfirmation.CloseTxt = Language.GetTranslation("Close", currentLanguage);
    }

}
