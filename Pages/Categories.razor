@page "/categories"
@using Microsoft.AspNetCore.Components.QuickGrid
@using NotesWasm.Models
@inject ILocalStorageService _localstorage;
@inject NavigationManager Navigation

<PageTitle>@categoriesTitle</PageTitle>

<div class="container mt-2">

    <h1 class="display-4">@categoriesTitle</h1>

    <UserComponent currentUser="@savedUser" title="@userTitle">

    </UserComponent>

    <button class="btn btn-primary" @onclick="AddCategoryPage">@addTxt</button>

    @if (categories != null && categories.Count() > 0)
    {
        <button class="btn btn-danger ms-3" @onclick="DeleteAllCategories">@deleteAllTxt</button>

        <div class="grid mt-2">
            <QuickGrid Items="categories.AsQueryable()" Pagination="@pagination">
                <PropertyColumn Property="@(category => category.Title)" Title="@tableTitle" Sortable="true" />

                <TemplateColumn Title="@tableActions" Align="Align.Center">
                    <div class="align-content-center">
                        <button class="btn btn-secondary  mt-2 mb-2" @onclick="@(() => EditCategoryPage(context))">@editTxt</button>
                        <button class="btn btn-danger mt-2 mb-2" @onclick="@(() => DeleteConfirmed(context))">@deleteTxt</button>
                    </div>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div class="page-buttons">
            @pageGrid:
            @if (pagination.TotalItemCount.HasValue)
            {
                for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="@PageButtonClass(capturedIndex)"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                        @(pageIndex + 1)
                    </button>
                }
            }
        </div>


    }


</div>

<CategoryConfirmation @ref="deleteConfirmation" OnConfirmed="DeleteCategory"></CategoryConfirmation>

<SimpleConfirm @ref="deleteAllConfirmation" OnConfirmed="DeleteAllCategoriesConfirmed"></SimpleConfirm>

@code {
    [CascadingParameter(Name = "currentLanguage")]
    public string currentLanguage { get; set; }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public List<Note> notes { get; set; } = new List<Note>();

    public List<Category> categories { get; set; } = new List<Category>();

    public string categoriesTitle { get; set; } = string.Empty;

    public string savedUser { get; set; } = string.Empty;

    public string userTitle { get; set; } = string.Empty;

    public string addTxt { get; set; } = string.Empty;

    public string editTxt { get; set; } = string.Empty;

    public string deleteTxt { get; set; } = string.Empty;

    public string deleteAllTxt { get; set; } = string.Empty;

    public string tableTitle { get; set; } = string.Empty;

    public string tableActions { get; set; } = string.Empty;

    public string pageGrid { get; set; } = string.Empty;

    private CategoryConfirmation deleteConfirmation;

    private SimpleConfirm deleteAllConfirmation;

    protected override async Task OnInitializedAsync()
    {
        savedUser = await _localstorage.GetItemAsync<string>("savedUser") ?? string.Empty;

        if (string.IsNullOrEmpty(savedUser))
        {
            Navigation.NavigateTo("/");
        }

        await UpdateTranslationsAsync();

        await LoadSessionAsync();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateTranslationsAsync();
    }

    private async Task UpdateTranslationsAsync()
    {
        userTitle = Language.GetTranslation("User", currentLanguage);
        categoriesTitle = Language.GetTranslation("CategoryTitle", currentLanguage);
        addTxt = Language.GetTranslation("Add", currentLanguage);
        editTxt = Language.GetTranslation("Edit", currentLanguage);
        deleteTxt = Language.GetTranslation("Delete", currentLanguage);
        tableTitle = Language.GetTranslation("Title", currentLanguage);
        tableActions = Language.GetTranslation("Actions", currentLanguage);
        pageGrid = Language.GetTranslation("Page", currentLanguage);
        deleteAllTxt = Language.GetTranslation("DeleteAll", currentLanguage);
    }

    private async Task LoadSessionAsync()
    {
        notes = await _localstorage.GetItemAsync<List<Note>>("notes") ?? new List<Note>();
        categories = await _localstorage.GetItemAsync<List<Category>>("categories") ?? new List<Category>();
    }

    private void AddCategoryPage()
    {
        Navigation.NavigateTo("/categories/current/0");
    }

    private void EditCategoryPage(Category category)
    {
        Navigation.NavigateTo($"/categories/current/{category.Id}");
    }

    private void DeleteCategory(Category category)
    {
        Category categoryToDelete = categories.FirstOrDefault(n => n.Id == category.Id);
        if (categoryToDelete != null)
        {
            categories.Remove(categoryToDelete);

            if (notes.Any(x => x.Category == categoryToDelete.Title))
            {
                notes.Where(x => x.Category == categoryToDelete.Title).ToList().ForEach(x => x.Category = string.Empty);
                for (int i = 0; i < notes.Count; i++)
                {
                    notes[i].Id = i + 1;
                }
                _localstorage.SetItemAsync("notes", notes);
            }
            for (int i = 0; i < categories.Count; i++)
            {
                categories[i].Id = i + 1;
            }
            _localstorage.SetItemAsync("categories", categories);
        }
        deleteConfirmation.Hide();
    }

    private void DeleteAllCategoriesConfirmed()
    {
        categories = new List<Category>();

        if (notes.Any())
        {
            notes.ForEach(x => x.Category = string.Empty);
            _localstorage.SetItemAsync("notes", notes);
        }

        _localstorage.SetItemAsync("categories", categories);
        deleteAllConfirmation.Hide();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private async Task DeleteConfirmed(Category currentCategory)
    {

        deleteConfirmation.Show();

        deleteConfirmation.BodyContent = string.Format(Language.GetTranslation("DeleteConfirmCat", currentLanguage), currentCategory.Title);

        deleteConfirmation.Title = Language.GetTranslation("ConfirmTitle", currentLanguage);

        deleteConfirmation.ConfirmTxt = Language.GetTranslation("Accept", currentLanguage);

        deleteConfirmation.CloseTxt = Language.GetTranslation("Close", currentLanguage);

        deleteConfirmation.CurrentCategory = currentCategory;
    }

    private async Task DeleteAllCategories()
    {

        deleteAllConfirmation.Show();

        deleteAllConfirmation.BodyContent = Language.GetTranslation("DeleteAllConfirmCat", currentLanguage);

        deleteAllConfirmation.Title = Language.GetTranslation("ConfirmTitle", currentLanguage);

        deleteAllConfirmation.ConfirmTxt = Language.GetTranslation("Accept", currentLanguage);

        deleteAllConfirmation.CloseTxt = Language.GetTranslation("Close", currentLanguage);
    }

}
